sensor:
  - platform: uptime
    name: "Uptime"
    id: uptime_sensor
    update_interval: 5s
    disabled_by_default: True

  - platform: debug
    free:
      name: "Heap Free"
      id: heap_free
      disabled_by_default: True
    loop_time:
      name: "Loop Time"
      id: loop_time
      disabled_by_default: True

  - platform: aht10
    #address: 0x38
    i2c_id: i2c_main
    variant: AHT20
    temperature:
      name: "AHT20 Temperature"
      id: temp_aht20
      disabled_by_default: True
    humidity:
      name: "AHT20 Humidity"
      id: hum_aht20
      disabled_by_default: True
    update_interval: 10s

  - platform: bmp280_i2c
    address: 0x77
    i2c_id: i2c_main
    temperature:
      name: "BMP280 Temperature"
      id: temp_bmp280
      oversampling: 16x
      disabled_by_default: True
    pressure:
      name: "BMP280 Pressure"
      id: pres_bmp280
      disabled_by_default: True
    update_interval: 10s

  - platform: sht4x
    #addr 0x44
    i2c_id: i2c_main
    temperature:
      name: "SHT40 Temperature"
      id: temp_sht40
      disabled_by_default: True
    humidity:
      name: "SHT40 Relative Humidity"
      id: hum_sht40
      disabled_by_default: True
    update_interval: 10s

  - platform: scd4x
    #address: 0x62
    i2c_id: i2c_main
    co2:
      name: "SCD40 CO2"
      id: co2_scd40
      disabled_by_default: True
    temperature:
      name: "SCD40 Temperature"
      id: temp_scd40
      disabled_by_default: True
    humidity:
      name: "SCD40 Humidity"
      id: hum_scd40
      disabled_by_default: True
    update_interval: 30s

  - platform: ens160_i2c
    address: 0x53
    i2c_id: i2c_2
    eco2:
      name: "ENS160 eCO2"
      id: eco2_ens160
      disabled_by_default: True
    tvoc:
      name: "ENS160 TVOC"
      id: tvoc_ens160
      disabled_by_default: True
      filters: 
        - exponential_moving_average: 
            send_every: 1
            alpha: 0.5
    aqi:
      name: "ENS160 Air Quality Index"
      id: aqi_ens160
      disabled_by_default: True
    update_interval: 10s
    compensation:
      temperature: temp_aht20_ens
      humidity: hum_aht20_ens

  - platform: aht10
    #address: 0x38
    i2c_id: i2c_2
    variant: AHT20
    temperature:
      name: "AHT20/ENS160 Temperature"
      id: temp_aht20_ens
      disabled_by_default: True
    humidity:
      name: "AHT20/ENS160 Humidity"
      id: hum_aht20_ens
      disabled_by_default: True
    update_interval: 10s

  - platform: sgp30
    i2c_id: i2c_main
    address: 0x58
    eco2:
      name: "SGP30 eCO2"
      id: eco2_sgp30
      disabled_by_default: True
      accuracy_decimals: 0
      filters: 
        - exponential_moving_average: 
            send_every: 1
            alpha: 0.2
    tvoc:
      name: "SGP30 TVOC"
      id: tvoc_sgp30
      disabled_by_default: True
      accuracy_decimals: 1
      filters: 
        - exponential_moving_average: 
            send_every: 1
            alpha: 0.2
    store_baseline: yes
    update_interval: 1s
    compensation: 
      humidity_source: hum_aht20
      temperature_source: temp_aht20

  - platform: sgp4x
    i2c_id: i2c_main
    #address: 0x59
    voc:
      name: "SGP41 VOC Index"
      id: aqi_voc_sgp41
      disabled_by_default: True
      icon: "mdi:air-filter"
      device_class: aqi
      state_class: measurement
      unit_of_measurement: "index points"
    nox:
      name: "SGP41 NOx Index"
      id: aqi_nox_sgp41
      disabled_by_default: True
      icon: "mdi:air-filter"
      device_class: aqi
      state_class: measurement
      unit_of_measurement: "index points"
    compensation: 
      humidity_source: hum_aht20
      temperature_source: temp_aht20
    store_baseline: True
    update_interval: 10s

  - platform: template
    name: "ZE08 CH2O"
    state_class: measurement
    device_class: volatile_organic_compounds
    unit_of_measurement: ppb
    accuracy_decimals: 0
    id: ch2o_ze08
    disabled_by_default: True
    filters: 
      - filter_out: 2000.0
      - exponential_moving_average: 
          send_every: 1
          alpha: 0.5
    update_interval: 10s

  - platform: pmsx003
    type: PMSX003 
    update_interval: 120s
    uart_id: uart_pms
    pm_1_0:
      name: "PMS Particulate Matter <1.0µm Concentration"
      id: pm1_pms
      disabled_by_default: True
    pm_2_5:
      name: "PMS Particulate Matter <2.5µm Concentration"
      id: pm25_pms
      disabled_by_default: True
    pm_10_0:
      name: "PMS Particulate Matter <10.0µm Concentration"
      id: pm10_pms
      disabled_by_default: True

  - platform: sen5x
    i2c_id: i2c_2
    id: sen5xseries
    pm_1_0:
      name: "SEN5x Particulate Matter <1.0µm Concentration"
      id: pm1_sen5x
      disabled_by_default: True
      accuracy_decimals: 1
    pm_2_5:
      name: "SEN5x Particulate Matter <2.5µm Concentration"
      id: pm25_sen5x
      disabled_by_default: True
      accuracy_decimals: 1
    pm_4_0:
      name: "SEN5x Particulate Matter <4.0µm Concentration"
      id: pm40_sen5x
      disabled_by_default: True
      accuracy_decimals: 1
    pm_10_0:
      name: "SEN5x Particulate Matter <10.0µm Concentration"
      id: pm10_sen5x
      disabled_by_default: True
      accuracy_decimals: 1
    temperature:
      name: "SEN5x Temperature"
      id: temp_sen5x
      disabled_by_default: True
      accuracy_decimals: 1
    humidity:
      name: "SEN5x Humidity"
      id: hum_sen5x
      disabled_by_default: True
      accuracy_decimals: 0
    voc:
      name: "SEN5x VOC"
      id: tvoc_sen5x
      disabled_by_default: True
      algorithm_tuning:
        index_offset: 100
        learning_time_offset_hours: 12
        learning_time_gain_hours: 12
        gating_max_duration_minutes: 180
        std_initial: 50
        gain_factor: 230
    nox:
      name: "SEN5x NOx"
      id: nox_sen5x
      disabled_by_default: True
      algorithm_tuning:
        index_offset: 100
        learning_time_offset_hours: 12
        learning_time_gain_hours: 12
        gating_max_duration_minutes: 180
        std_initial: 50
        gain_factor: 230
    temperature_compensation:
      offset: 0
      normalized_offset_slope: 0
      time_constant: 0
    acceleration_mode: low
    store_baseline: true
    address: 0x69
    update_interval: 10s

  - platform: template
    name: "Temperature"
    id: best_temp
    update_interval: 10s
    device_class: temperature
    icon: mdi:thermometer
    unit_of_measurement: "${deg_c_str}"
    lambda: |-
      float temps[6] = {id(temp_sen5x).state,
                        id(temp_sht40).state,
                        id(temp_aht20).state,
                        id(temp_scd40).state,
                        id(temp_aht20_ens).state,
                        id(temp_bmp280).state};
      float temp = NAN;
      for (int i = 0; i < 6; i++) {
        if (!isnan(temps[i])) {
          temp = temps[i] + id(temp_offset).state;
          break;
        }
      }
      id(temp_f).publish_state((temp * 9.0 / 5.0) + 32.0);
      return temp;
    on_value:
      - if:
          any:
            lambda: return (isnan(x) || (id(temp_unit_control).state == "${deg_f_str}"));
          then:
            - lvgl.widget.hide: temp_widget
          else:
            - lvgl.widget.show: temp_widget
            - lvgl.label.update:
                id: temperature
                text:
                    format: "%.1f"
                    args: [ x ]
                text_color: !lambda |-
                  if (x < $temp_cold) { return lv_color_hex($cold_hex); }
                  else if (x > $temp_hot) { return lv_color_hex($hot_hex); }
                  else { return lv_color_hex($comfort_hex); }

  - platform: template
    name: "Temperature ${deg_f_str}"
    id: temp_f
    update_interval: never
    device_class: temperature
    icon: mdi:thermometer
    unit_of_measurement: "${deg_f_str}"
    disabled_by_default: True
    on_value:
      - if:
          condition:
            lambda: return (isnan(x) || (id(temp_unit_control).state == "${deg_c_str}"));
          then:
            - lvgl.widget.hide: temp_f_widget
          else:
            - lvgl.widget.show: temp_f_widget
            - lvgl.label.update:
                id: temperature_f
                text:
                    format: "%.1f"
                    args: [ x ]
                text_color: !lambda |-
                  float tempc = (x - 32.0) * 5.0 / 9.0;
                  if (tempc < $temp_cold) { return lv_color_hex($cold_hex); }
                  else if (tempc > $temp_hot) { return lv_color_hex($hot_hex); }
                  else { return lv_color_hex($comfort_hex); }

  - platform: template
    name: "Humidity"
    id: best_humidity
    update_interval: 10s
    device_class: humidity
    icon: mdi:water-percent
    unit_of_measurement: "%"
    lambda: |-
      float hums[5] = {id(hum_sen5x).state,
                       id(hum_sht40).state,
                       id(hum_aht20).state,
                       id(hum_scd40).state,
                       id(hum_aht20_ens).state};
      float hum = NAN;
      for (int i = 0; i < 5; i++) {
        if (!isnan(hums[i])) { hum = hums[i] + id(hum_offset).state; break; }
      }
      return hum;
    on_value:
      - if:
          condition:
            lambda: return isnan(x);
          then:
            - lvgl.widget.hide: humidity_widget
          else:
            - lvgl.widget.show: humidity_widget
            - lvgl.label.update:
                id: humidity
                text:
                  format: "%.1f"
                  args: [ x ]
                text_color: !lambda |-
                  if (x > $humid_high) { return lv_color_hex($high_hex); }
                  else if (x < $dry_high) { return lv_color_hex($high_hex); }
                  else if (x > $humid_medium) { return lv_color_hex($medium_hex); }
                  else if (x < $dry_medium) { return lv_color_hex($medium_hex); }
                  else if (x > $humid_low) { return lv_color_hex($low_hex); }
                  else if (x > $dry_low) { return lv_color_hex($low_hex); }
                  else { return lv_color_hex($safe_hex); }

  - platform: template
    name: "CO2"
    id: best_co2
    update_interval: 10s
    device_class: carbon_dioxide
    icon: mdi:molecule-co2
    unit_of_measurement: "ppm"
    lambda: |-
      float cos[3] = {id(co2_scd40).state,
                      id(eco2_ens160).state,
                      id(eco2_sgp30).state};
      float co = NAN;
      for (int i = 0; i < 3; i++) {
        if (!isnan(cos[i])) { co = cos[i]; break; }
      }
      return co;
    on_value:
      - if:
          condition:
            lambda: return isnan(x);
          then:
            - lvgl.widget.hide: co2_widget
          else:
            - lvgl.widget.show: co2_widget
            - lvgl.label.update:
                id: co2
                text:
                  format: "%.0f"
                  args: [ x ]
                text_color: !lambda |-
                  if (x > $co2_high) { return lv_color_hex($high_hex); }
                  else if (x > $co2_medium) { return lv_color_hex($medium_hex); }
                  else if (x > $co2_low) { return lv_color_hex($low_hex); }
                  else { return lv_color_hex($safe_hex); }

  - platform: template
    name: "Pressure"
    id: best_pressure
    update_interval: 10s
    device_class: pressure
    icon: mdi:gauge
    unit_of_measurement: "hPa"
    lambda: |-
      float pres = NAN;
      if (!isnan(id(pres_bmp280).state)) { pres = id(pres_bmp280).state; }
      return pres;
    on_value:
      - if:
          condition:
            lambda: return isnan(x);
          then:
            - lvgl.widget.hide: pressure_widget
          else:
            - lvgl.widget.show: pressure_widget
            - lvgl.label.update:
                id: pressure
                text:
                  format: "%.0f"
                  args: [ x ]

  - platform: template
    name: "VOCs"
    id: best_voc
    update_interval: 10s
    device_class: volatile_organic_compounds_parts
    icon: mdi:radiator
    unit_of_measurement: "ppb"
    lambda: |-
      float vocs[3] = {id(tvoc_sen5x).state,
                       id(tvoc_ens160).state,
                       id(tvoc_sgp30).state};
      float voc = NAN;
      for (int i = 0; i < 3; i++) {
        if (!isnan(vocs[i])) { voc = vocs[i]; break; }
      }
      return voc;
    on_value:
      - if:
          condition:
            lambda: return isnan(x);
          then:
            - lvgl.widget.hide: voc_widget
          else:
            - lvgl.widget.show: [voc_widget, voc_header_widget]
            - lvgl.label.update:
                id: vocs
                text:
                  format: "%.0f"
                  args: [ x ]
                text_color: !lambda |-
                  if (x > $voc_high) { return lv_color_hex($high_hex); }
                  else if (x > $voc_medium) { return lv_color_hex($medium_hex); }
                  else if (x > $voc_low) { return lv_color_hex($low_hex); }
                  else { return lv_color_hex($safe_hex); }

  - platform: template
    name: "CH2O"
    id: best_ch2o
    update_interval: 10s
    device_class: volatile_organic_compounds_parts
    icon: mdi:molecule
    unit_of_measurement: "ppb"
    lambda: |-
      float ch2o = NAN;
      if (!isnan(id(ch2o_ze08).state)) { ch2o = id(ch2o_ze08).state; }
      return ch2o;
    on_value:
      - if:
          condition:
            lambda: return isnan(x);
          then:
            - lvgl.widget.hide: ch2o_widget
          else:
            - lvgl.widget.show: [ch2o_widget, voc_header_widget]
            - lvgl.label.update:
                id: ch2o
                text:
                  format: "%.0f"
                  args: [ x ]
                text_color: !lambda |-
                  if (x > $ch2o_high) { return lv_color_hex($high_hex); }
                  else if (x > $ch2o_medium) { return lv_color_hex($medium_hex); }
                  else if (x > $ch2o_low) { return lv_color_hex($low_hex); }
                  else { return lv_color_hex($safe_hex); }

  - platform: template
    name: "PM 1.0"
    id: best_pm1
    update_interval: 10s
    device_class: pm1
    state_class: measurement
    icon: mdi:chemical-weapon
    unit_of_measurement: "${ug_m3_str}"
    lambda: |-
      float pm1s[2] = {id(pm1_sen5x).state,
                       id(pm1_pms).state};
      float pm1 = NAN;
      for (int i = 0; i < 2; i++) {
        if (!isnan(pm1s[i])) { pm1 = pm1s[i]; break; }
      }
      return pm1;
    on_value:
      - if:
          condition:
            lambda: return isnan(x);
          then:
            - lvgl.widget.hide: pm1_widget
          else:
            - lvgl.widget.show: [pm1_widget, pms_header_widget]
            - lvgl.label.update:
                id: pm_1_0
                text:
                  format: "%.0f"
                  args: [ x ]
                text_color: !lambda |-
                  if (x > $pm1_high) { return lv_color_hex($high_hex); }
                  else if (x > $pm1_medium) { return lv_color_hex($medium_hex); }
                  else if (x > $pm1_low) { return lv_color_hex($low_hex); }
                  else { return lv_color_hex($safe_hex); }

  - platform: template
    name: "PM 2.5"
    id: best_pm25
    update_interval: 10s
    device_class: pm25
    state_class: measurement
    icon: mdi:chemical-weapon
    unit_of_measurement: "${ug_m3_str}"
    lambda: |-
      float pm25s[2] = {id(pm25_sen5x).state,
                       id(pm25_pms).state};
      float pm25 = NAN;
      for (int i = 0; i < 2; i++) {
        if (!isnan(pm25s[i])) { pm25 = pm25s[i]; break; }
      }
      return pm25;
    on_value:
      - if:
          condition:
            lambda: return isnan(x);
          then:
            - lvgl.widget.hide: pm25_widget
          else:
            - lvgl.widget.show: [pm25_widget, pms_header_widget]
            - lvgl.label.update:
                id: pm_2_5
                text:
                  format: "%.0f"
                  args: [ x ]
                text_color: !lambda |-
                  if (x > $pm25_high) { return lv_color_hex($high_hex); }
                  else if (x > $pm25_medium) { return lv_color_hex($medium_hex); }
                  else if (x > $pm25_low) { return lv_color_hex($low_hex); }
                  else { return lv_color_hex($safe_hex); }

  - platform: template
    name: "PM 4.0"
    id: best_pm40
    update_interval: 10s
    device_class: pm10
    state_class: measurement
    icon: mdi:chemical-weapon
    unit_of_measurement: "${ug_m3_str}"
    lambda: |-
      float pm40s[1] = {id(pm40_sen5x).state};
      float pm40 = NAN;
      for (int i = 0; i < 1; i++) {
        if (!isnan(pm40s[i])) { pm40 = pm40s[i]; break; }
      }
      return pm40;
    on_value:
      - if:
          condition:
            lambda: return isnan(x);
          then:
            - lvgl.widget.hide: pm40_widget
          else:
            - lvgl.widget.show: [pm40_widget, pms_header_widget]
            - lvgl.label.update:
                id: pm_4_0
                text:
                  format: "%.0f"
                  args: [ x ]
                text_color: !lambda |-
                  if (x > $pm40_high) { return lv_color_hex($high_hex); }
                  else if (x > $pm40_medium) { return lv_color_hex($medium_hex); }
                  else if (x > $pm40_low) { return lv_color_hex($low_hex); }
                  else { return lv_color_hex($safe_hex); }

  - platform: template
    name: "PM 10"
    id: best_pm10
    update_interval: 10s
    device_class: pm10
    state_class: measurement
    icon: mdi:chemical-weapon
    unit_of_measurement: "${ug_m3_str}"
    lambda: |-
      float pm10s[2] = {id(pm10_sen5x).state,
                       id(pm10_pms).state};
      float pm10 = NAN;
      for (int i = 0; i < 2; i++) {
        if (!isnan(pm10s[i])) { pm10 = pm10s[i]; break; }
      }
      return pm10;
    on_value:
      - if:
          condition:
            lambda: return isnan(x);
          then:
            - lvgl.widget.hide: pm10_widget
          else:
            - lvgl.widget.show: [pm10_widget, pms_header_widget]
            - lvgl.label.update:
                id: pm_10_0
                text:
                  format: "%.0f"
                  args: [ x ]
                text_color: !lambda |-
                  if (x > $pm10_high) { return lv_color_hex($high_hex); }
                  else if (x > $pm10_medium) { return lv_color_hex($medium_hex); }
                  else if (x > $pm10_low) { return lv_color_hex($low_hex); }
                  else { return lv_color_hex($safe_hex); }
